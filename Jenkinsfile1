pipeline {
  agent any

  tools {
    maven "mymaven1"
  }

  environment {
    IMAGE_NAME = "saigowtham2605/financeme1:1.0"
    AWS_DEFAULT_REGION = "us-east-1"
  }

  stages {

    stage('Build') {
      steps {
        git url: 'https://github.com/Gautirockz/star-agile-banking-finance.git', branch: 'master'
        sh "mvn -Dmaven.test.failure.ignore=true clean package"
      }
    }

    stage('Create Docker Image') {
      steps {
        sh 'docker build -t $IMAGE_NAME .'
      }
    }

    stage('Docker Login') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'dockercreds', passwordVariable: 'DOCKER_PASS', usernameVariable: 'DOCKER_USER')]) {
          sh '''
            echo "🔐 Logging in to Docker Hub..."
            echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
          '''
        }
      }
    }

    stage('Push Image') {
      steps {
        sh 'docker push $IMAGE_NAME'
      }
    }

    stage('Config & Deployment') {
      steps {
        withCredentials([
          [$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'awsid1'],
          file(credentialsId: 'ec2-ssh-key', variable: 'PEM')
        ]) {
          sh '''
            set -e
            echo "🔑 Injected PEM from Jenkins:"
            ls -l $PEM
            chmod 600 $PEM

            echo "✅ Checking AWS identity..."
            aws sts get-caller-identity

            echo "📂 Copying PEM file into terraform-files directory..."
            cp "$PEM" terraform-files/saijenkins1.pem
            chmod 600 terraform-files/saijenkins1.pem

            cd terraform-files
            terraform init -input=false
            terraform validate

            # Optional cleanup before recreate
            # terraform destroy --auto-approve -var "private_key_path=saijenkins1.pem" || true

            echo "🚀 Creating new EC2 instance..."
            terraform apply --auto-approve -var "private_key_path=saijenkins1.pem"

            echo "🌍 Fetching instance public IP..."
            terraform output public_ip || true
          '''
        }

        script {
          def ec2_ip = sh(script: "cd terraform-files && terraform output -raw public_ip", returnStdout: true).trim()
          echo "EC2 Public IP: ${ec2_ip}"
          sh """
            echo "🔎 Checking SSH (port 22)..."
            nc -zv ${ec2_ip} 22 || true
            echo "🌐 Checking HTTP (port 80)..."
            nc -zv ${ec2_ip} 80 || true
            echo "✅ Connectivity test finished."
          """
        }
      }
    }
  }

  post {
    success {
      echo "🎉 Pipeline executed successfully!"
    }
    failure {
      echo "❌ Pipeline failed — check the logs for details."
    }
  }
}
