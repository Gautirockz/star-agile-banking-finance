pipeline {
  agent any

  tools {
    maven "mymaven1"
  }

  environment {
    IMAGE_NAME = "saigowtham2605/financeme1:1.0"
    AWS_DEFAULT_REGION = "us-east-1"
  }

  stages {

    stage('Build') {
      steps {
        git url: 'https://github.com/Gautirockz/star-agile-banking-finance.git', branch: 'master'
        sh "mvn -Dmaven.test.failure.ignore=true clean package"
      }
    }

    stage('Create Docker Image') {
      steps {
        sh 'docker build -t $IMAGE_NAME .'
      }
    }

    stage('Docker Login') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'dockercreds', passwordVariable: 'DOCKER_PASS', usernameVariable: 'DOCKER_USER')]) {
          sh '''
            echo "🔐 Logging in to Docker Hub..."
            echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
          '''
        }
      }
    }

    stage('Push Image') {
      steps {
        sh 'docker push $IMAGE_NAME'
      }
    }

   stage('Config & Deployment') {
  steps {
    withCredentials([
      [$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'awsid1'],
      file(credentialsId: 'ec2-ssh-key', variable: 'PEM')
    ]) {
      sh '''
        set -e
        echo "🔑 Checking PEM file provided by Jenkins..."
        if [ ! -f "$PEM" ]; then
          echo "❌ PEM file not found! Jenkins credential type might be wrong."
          echo "➡️ Go to Jenkins > Credentials > ec2-ssh-key and ensure it is a Secret File."
          exit 1
        fi
        echo "✅ PEM found at: $PEM"
        ls -l $PEM

        echo "📂 Creating terraform-files directory..."
        mkdir -p terraform-files

        echo "📄 Copying PEM to terraform-files/saijenkins1.pem"
        cp "$PEM" terraform-files/saijenkins1.pem

        echo "🔧 Setting permissions..."
        chmod 600 terraform-files/saijenkins1.pem
        ls -l terraform-files/

        echo "🌍 Checking AWS identity..."
        aws sts get-caller-identity --region us-east-1

        cd terraform-files
        terraform init -input=false
        terraform validate

        echo "🚀 Applying Terraform..."
        terraform apply --auto-approve -var "private_key_path=saijenkins1.pem"

        echo "🌍 Fetching public IP..."
        terraform output public_ip || true
      '''
    }

    script {
      def ec2_ip = sh(script: "cd terraform-files && terraform output -raw public_ip", returnStdout: true).trim()
      echo "EC2 Public IP: ${ec2_ip}"
      sh """
        echo "🔎 Checking SSH (port 22)..."
        nc -zv ${ec2_ip} 22 || true
        echo "🌐 Checking HTTP (port 80)..."
        nc -zv ${ec2_ip} 80 || true
      """
    }
  }
}

  }

  post {
    success {
      echo "🎉 Pipeline executed successfully!"
    }
    failure {
      echo "❌ Pipeline failed — check the logs for details."
    }
  }
}
